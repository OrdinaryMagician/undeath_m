// UNDEATH menu code

Class UnMessageBox : MessageBoxMenu
{
	override void Init( Menu parent, String message, int messagemode, bool playsound, Name cmd, voidptr native_handler )
	{
		Super.Init(parent,message,messagemode,playsound,cmd,native_handler);
		destWidth = CleanWidth_1;
		destHeight = CleanHeight_1;
		mMessage = textfont.BreakLines(Stringtable.Localize(message),400);
	}

	override void Drawer()
	{
		int fontheight = textfont.GetHeight();
		double y = destHeight/2;
		int c = mMessage.Count();
		int theight = 0;
		for ( int i=0; i<c; i++ )
		{
			bool big = ((i==c-1)||(mMessage.StringWidth(i)==0))?false:true;
			theight += big?bigfont.GetHeight():fontheight;
		}
		y -= theight/2;
		for ( int i=0; i<c; i++ )
		{
			bool big = ((i==c-1)||(mMessage.StringWidth(i)==0))?false:true;
			int w = big?bigfont.StringWidth(mMessage.StringAt(i)):mMessage.StringWidth(i);
			Screen.DrawText(big?bigfont:textfont,OptionMenuSettings.mFontColorValue,(destWidth-w)/2,y,mMessage.StringAt(i),DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
			y += big?bigfont.GetHeight():fontheight;
		}
		if ( mMessageMode != 0 ) return;
		y += 8;
		mMouseY = int(y);
		String stryes = Stringtable.Localize("$TXT_YES");
		String strno = Stringtable.Localize("$TXT_NO");
		Screen.DrawText(textfont,messageSelection==0?OptionMenuSettings.mFontColorSelection:OptionMenuSettings.mFontColor,(destWidth-textfont.StringWidth(stryes))/2,y,stryes, DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
		Screen.DrawText(textfont,messageSelection==1?OptionMenuSettings.mFontColorSelection:OptionMenuSettings.mFontColor,(destWidth-textfont.StringWidth(strno))/2,y+fontheight,strno,DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
		if ( (messageSelection < 0) || ((MenuTime()%8) >= 4) ) return;
		Screen.DrawText(textfont,OptionMenuSettings.mFontColorSelection,(destWidth-textfont.StringWidth(messageSelection?strno:stryes))/2-15,y+fontheight*messageSelection,"›",DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
		Screen.DrawText(textfont,OptionMenuSettings.mFontColorSelection,(destWidth+textfont.StringWidth(messageSelection?strno:stryes))/2+8,y+fontheight*messageSelection,"‹",DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
	}

	override bool MouseEvent( int type, int x, int y )
	{
		if ( mMessageMode == 1 )
		{
			if ( type == MOUSE_Click )
				return MenuEvent(MKEY_Enter,true);
			return false;
		}
		else
		{
			int sel = -1;
			int fh = textfont.GetHeight();
			// convert x/y from screen to virtual coordinates, according to CleanX/Yfac use in DrawTexture
			x = x*destWidth/screen.GetWidth();
			y = y*destHeight/screen.GetHeight();
			if ( (y >= mMouseY) && (y < mMouseY+2*fh) )
			{
				sel = (y >= mMouseY+fh);
				// are we actually selecting the text?
				String txt = sel?Stringtable.Localize("$TXT_NO"):Stringtable.Localize("$TXT_YES");
				int txtln = textfont.StringWidth(txt);
				int minx = (destWidth-txtln);
				if ( (x < (destWidth-txtln)) && (x > (destWidth+txtln)) )
					sel = -1;
			}
			messageSelection = sel;
			if ( type == MOUSE_Release ) return MenuEvent(MKEY_Enter,true);
			return true;
		}
	}
}

Class UnConversationMenu : ConversationMenu
{
	// TODO
}

Class UnPlayerMenu : ListMenu
{
	const HEADERY = -100.;
	const NAMEY = 240.;
	const BASEOFS = 180.;

	Array<TextureID> portraits;
	Array<BrokenLines> traits, stats, bios;
	double fact, fact2, fact3;
	int prev, part, ppart;
	transient uint prevms;

	override void Init( Menu parent, ListMenuDescriptor desc )
	{
		Super.Init(parent,desc);
		portraits.Resize(PlayerClasses.Size());
		traits.Resize(PlayerClasses.Size());
		stats.Resize(PlayerClasses.Size());
		bios.Resize(PlayerClasses.Size());
		for ( int i=0; i<mDesc.mItems.Size(); i++ )
		{
			Name act;
			int param;
			[act, param] = mDesc.mItems[i].GetAction();
			if ( (act != 'EpisodeMenu') || (param < 0) || (param >= PlayerClasses.Size()) )
				continue;
			let def = GetDefaultByType((Class<PlayerPawn>)(PlayerClasses[param].type));
			portraits[param] = TexMan.CheckForTexture(def.Portrait,TexMan.Type_Any);
			String str = StringTable.Localize("$PF_"..PlayerClasses[param].type.GetClassName());
			traits[param] = SmallFont2.BreakLines(str,400);
			str = StringTable.Localize("$ST_"..PlayerClasses[param].type.GetClassName());
			stats[param] = SmallFont2.BreakLines(str,400);
			str = StringTable.Localize("$BIO_"..PlayerClasses[param].type.GetClassName());
			bios[param] = SmallFont2.BreakLines(str,400);
		}
		prevms = MSTime();
	}

	override bool MenuEvent( int mkey, bool fromcontroller )
	{
		prev = mDesc.mSelectedItem;
		switch ( mkey )
		{
		case MKEY_Left:
			if ( mDesc.mSelectedItem > 0 )
			{
				mDesc.mSelectedItem--;
				MenuSound("menu/cursor");
				fact -= 1.;
				fact2 = 1.;
			}
			return true;
		case MKEY_Right:
			if ( mDesc.mSelectedItem < mDesc.mItems.Size()-1 )
			{
				mDesc.mSelectedItem++;
				MenuSound("menu/cursor");
				fact += 1.;
				fact2 = -1.;
			}
			return true;
		case MKEY_Up:
			if ( part > -1 )
			{
				ppart = part;
				part--;
				fact3 = 1.;
				MenuSound("menu/change");
			}
			return true;
		case MKEY_Down:
			if ( part < 1 )
			{
				ppart = part;
				part++;
				fact3 = 1.;
				MenuSound("menu/change");
			}
			return true;
		case MKEY_Enter:
			if ( (mDesc.mSelectedItem >= 0) && mDesc.mItems[mDesc.mSelectedItem].Activate() )
				MenuSound("menu/advance");
			return true;
		}
		return Menu.MenuEvent(mkey, fromcontroller);
	}

	override bool MouseEvent( int type, int x, int y )
	{
		int sel = -1;
		// adjust to clean_1 scale
		x = ((x-(Screen.GetWidth()/2))/CleanXFac_1)+160;
		y = ((y-(Screen.GetHeight()/2))/CleanYFac_1)+100;
		if ( mFocusControl != NULL )
		{
			mFocusControl.MouseEvent(type,x,y);
			return true;
		}
		else if ( (y > HEADERY+BigFont.GetHeight()) && (y < NAMEY+BigFont.GetHeight()) )
		{
			double ofs = 160-BASEOFS*mDesc.mSelectedItem;
			for ( int i=0; i<mDesc.mItems.Size(); i++, ofs += BASEOFS )
			{
				if ( (x < (ofs-BASEOFS/2)) || (x > (ofs+BASEOFS/2)) )
					continue;
				if ( i == mDesc.mSelectedItem ) mDesc.mItems[i].MouseEvent(type,x,y);
				else if ( type == Menu.MOUSE_Release )
				{
					MenuSound("menu/cursor");
					fact = i-mDesc.mSelectedItem;
					fact2 = (i>mDesc.mSelectedItem)?-1:1;
					mDesc.mSelectedItem = i;
				}
				return true;
			}
		}
		return Menu.MouseEvent(type,x,y);
	}

	private void DrawProfile( int idx, double offset )
	{
		let ci = mDesc.mItems[idx];
		Name act;
		Int param;
		[act, param] = ci.GetAction();
		if ( (param < 0) || (param >= portraits.Size()) ) return;
		double alpha = max(0.,1.-(abs(offset)/CleanWidth_1)*2);
		int sat = min(255,int((abs(offset)/CleanWidth_1)*3*255));
		double x = 160+offset;
		double y = 85;
		UnUtility.AdjustClean_1(x,y);
		Screen.DrawTexture(portraits[param],false,x,y,DTA_ScaleX,CleanXFac_1*.125,DTA_ScaleY,CleanYFac_1*.125,DTA_Alpha,alpha,DTA_Desaturate,sat);
	}

	override void Drawer()
	{
		if ( prevms )
		{
			double frametime = (MSTime()-prevms)/1000.;
			double theta = clamp(8.*frametime,0.,1.); // naive, but whatever
			fact = fact*(1.-theta);
			fact2 = fact2*(1.-theta);
			fact3 = fact3*(1.-theta);
		}
		String str = StringTable.Localize("$MNU_CHOOSECLASS");
		double x = (320-BigFont.StringWidth(str))/2;
		double y = HEADERY;
		UnUtility.AdjustClean_1(x,y);
		Screen.DrawText(BigFont,Font.CR_RED,x,y,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		if ( mDesc.mSelectedItem == -1 )
		{
			Menu.Drawer();
			prevms = MSTime();
			return;
		}
		let ci = mDesc.mItems[mDesc.mSelectedItem];
		if ( ci is 'ListMenuItemTextItem' )
		{
			str = StringTable.Localize(ListMenuItemTextItem(ci).mText);
			x = (320-BigFont.StringWidth(str))/2;
			y = NAMEY;
			UnUtility.AdjustClean_1(x,y);
			Screen.DrawText(BigFont,Font.CR_RED,x-BASEOFS*CleanXFac_1*fact2,y,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,1.-abs(fact2));
			// draw class if any
			Name act;
			Int param;
			[act, param] = ci.GetAction();
			if ( (param >= 0) && (param < portraits.Size()) )
			{
				str = StringTable.Localize("$CLS_"..PlayerClasses[param].type.GetClassName());
				x = (320-SmallFont.StringWidth(str))/2;
				y = NAMEY-SmallFont.GetHeight()+6;
				UnUtility.AdjustClean_1(x,y);
				Screen.DrawText(SmallFont,Font.CR_WHITE,x-BASEOFS*CleanXFac_1*fact2,y,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,1.-abs(fact2));
			}
		}
		if ( fact2 != 0. )
		{
			let pi = mDesc.mItems[prev];
			if ( pi is 'ListMenuItemTextItem' )
			{
				str = StringTable.Localize(ListMenuItemTextItem(pi).mText);
				x = (320-BigFont.StringWidth(str))/2;
				y = NAMEY;
				UnUtility.AdjustClean_1(x,y);
				double invfact2 = (fact2>0)?(1.-fact2):-(1.-abs(fact2));
				Screen.DrawText(BigFont,Font.CR_DARKRED,x+BASEOFS*CleanXFac_1*invfact2,y,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,abs(fact2));
				// draw class if any
				Name act;
				Int param;
				[act, param] = pi.GetAction();
				if ( (param >= 0) && (param < portraits.Size()) )
				{
					str = StringTable.Localize("$CLS_"..PlayerClasses[param].type.GetClassName());
					x = (320-SmallFont.StringWidth(str))/2;
					y = NAMEY-SmallFont.GetHeight()+6;
					UnUtility.AdjustClean_1(x,y);
					Screen.DrawText(SmallFont,Font.CR_DARKGRAY,x+BASEOFS*CleanXFac_1*invfact2,y,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,abs(fact2));
				}
			}
		}
		// draw spread out from current item, so closer items to center are layered on top
		double ofs = fact*BASEOFS;
		DrawProfile(mDesc.mSelectedItem,ofs);
		// left
		for ( int i=mDesc.mSelectedItem-1; i>=0; i-- )
		{
			ofs -= BASEOFS;
			if ( ofs < -CleanWidth_1/2 ) continue;
			if ( ofs > CleanWidth_1/2 ) continue;
			DrawProfile(i,ofs);
		}
		// right
		ofs = fact*BASEOFS;
		for ( int i=mDesc.mSelectedItem+1; i<mDesc.mItems.Size(); i++ )
		{
			ofs += BASEOFS;
			if ( ofs < -CleanWidth_1/2 ) continue;
			if ( ofs > CleanWidth_1/2 ) continue;
			DrawProfile(i,ofs);
		}
		// draw stats and traits of current selection
		if ( ci is 'ListMenuItemTextItem' )
		{
			Name act;
			Int param;
			[act, param] = ci.GetAction();
			if ( (param >= 0) && (param < portraits.Size()) )
			{
				double invfact3 = (1.-fact3);
				if ( (part == -1) || ((ppart == -1) && (fact3 > 0.)) )
				{
					int lmax = 0;
					for ( int i=0; i<traits[param].Count(); i++ )
					{
						if ( traits[param].StringWidth(i) > lmax )
							lmax = traits[param].StringWidth(i);
					}
					x = 110-lmax;
					y = 85-(traits[param].Count()*SmallFont2.GetHeight()+4)/2;
					y -= (ppart==-1)?(invfact3*16):(fact3*16);
					UnUtility.AdjustClean_1(x,y);
					Screen.Dim("Black",.75*((ppart==-1)?fact3:invfact3),int(x-8*CleanXFac_1),int(y-4*CleanYFac_1),(lmax+16)*CleanXFac_1,(traits[param].Count()*SmallFont2.GetHeight()+12)*CleanYFac_1);
					for ( int i=0; i<traits[param].Count(); i++ )
					{
						if ( traits[param].StringAt(i).Length() == 2 )
							y += 4*CleanYFac_1;
						Screen.DrawText(SmallFont2,Font.CR_WHITE,x,y,traits[param].StringAt(i),DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,(ppart==-1)?fact3:invfact3);
						y += SmallFont2.GetHeight()*CleanYFac_1;
					}
					lmax = 0;
					for ( int i=0; i<stats[param].Count(); i++ )
					{
						if ( stats[param].StringWidth(i) > lmax )
							lmax = stats[param].StringWidth(i);
					}
					x = 210;
					y = 85-(stats[param].Count()*SmallFont2.GetHeight()+4)/2;
					y -= (ppart==-1)?(invfact3*16):(fact3*16);
					UnUtility.AdjustClean_1(x,y);
					Screen.Dim("Black",.75*((ppart==-1)?fact3:invfact3),int(x-8*CleanXFac_1),int(y-4*CleanYFac_1),(lmax+16)*CleanXFac_1,(stats[param].Count()*SmallFont2.GetHeight()+12)*CleanYFac_1);
					for ( int i=0; i<stats[param].Count(); i++ )
					{
						if ( stats[param].StringAt(i).Length() == 2 )
							y += 4*CleanYFac_1;
						Screen.DrawText(SmallFont2,Font.CR_WHITE,x,y,stats[param].StringAt(i),DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,(ppart==-1)?fact3:invfact3);
						y += SmallFont2.GetHeight()*CleanYFac_1;
					}
				}
				if ( (part == 1) || ((ppart == 1) && (fact3) > 0.) )
				{
					int lmax = 0;
					for ( int i=0; i<bios[param].Count(); i++ )
					{
						if ( bios[param].StringWidth(i) > lmax )
							lmax = bios[param].StringWidth(i);
					}
					x = 160-lmax/2;
					y = 85-(bios[param].Count()*SmallFont2.GetHeight())/2;
					y += (ppart==1)?(invfact3*16):(fact3*16);
					UnUtility.AdjustClean_1(x,y);
					Screen.Dim("Black",.75*((ppart==1)?fact3:invfact3),int(x-8*CleanXFac_1),int(y-4*CleanYFac_1),(lmax+16)*CleanXFac_1,(bios[param].Count()*SmallFont2.GetHeight()+8)*CleanYFac_1);
					for ( int i=0; i<bios[param].Count(); i++ )
					{
						Screen.DrawText(SmallFont2,Font.CR_WHITE,x,y,bios[param].StringAt(i),DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,(ppart==1)?fact3:invfact3);
						y += SmallFont2.GetHeight()*CleanYFac_1;
					}
				}
			}
		}
		Menu.Drawer();
		prevms = MSTime();
	}
}

Class UnListMenu : ListMenu
{
	override bool MouseEvent( int type, int x, int y )
	{
		if ( mDesc.DisplayWidth() != ListMenuDescriptor.CleanScale )
			return Super.MouseEvent(type,x,y);
		int sel = -1;
		double sx, sy;
		// this menu uses the OTHER clean scale
		x = ((x-(screen.GetWidth()/2))/CleanXfac_1)+160;
		y = ((y-(screen.GetHeight()/2))/CleanYfac_1)+100;
		if ( mFocusControl != NULL )
		{
			mFocusControl.MouseEvent(type,x,y);
			return true;
		}
		else if ( ((mDesc.mWLeft <= 0) || (x > mDesc.mWLeft)) && ((mDesc.mWRight <= 0) || (x < mDesc.mWRight)) )
		{
			for( int i=0;i<mDesc.mItems.Size(); i++ )
			{
				if ( !mDesc.mItems[i].CheckCoordinate(x,y) )
					continue;
				mDesc.mSelectedItem = i;
				mDesc.mItems[i].MouseEvent(type,x,y);
				return true;
			}
		}
		mDesc.mSelectedItem = -1;
		return Menu.MouseEvent(type,x,y);
	}
}

Class ListMenuItemUnLogo : ListMenuItem
{
	TextureID mTexture;
	int ypos;

	void Init( ListMenuDescriptor desc, int ypos )
	{
		Super.Init(desc.mXpos,desc.mYpos);
		self.ypos = ypos;
		mTexture = TexMan.CheckForTexture("graphics/M_UNDEATH.png",TexMan.Type_Any);
	}

	override void Draw( bool selected, ListMenuDescriptor desc )
	{
		if ( !mTexture.Exists() )
			return;
		int w = desc?desc.DisplayWidth():ListMenuDescriptor.CleanScale;
		int h = desc?desc.DisplayHeight():-1;
		Vector2 vs = TexMan.GetScaledSize(mTexture);
		double x;
		if ( w == ListMenuDescriptor.CleanScale )
		{
			x = (320-vs.x)/2;
			double y = ypos;
			UnUtility.AdjustClean_1(x,y);
			Screen.DrawTexture(mTexture,false,x,y,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		}
		else
		{
			x = (w-vs.x)/2;
			Screen.DrawTexture(mTexture,false,x,ypos,DTA_VirtualWidth,w,DTA_VirtualHeight,h,DTA_FullscreenScale,FSMode_ScaleToFit43);
		}
	}
}

Class ListMenuItemUnTextItemM : ListMenuItemSelectable
{
	String mText;
	Font mFont;
	int mColor;
	int mColorSelected;
	double selfade;
	transient uint prevms;

	void Init( ListMenuDescriptor desc, String text, String hotkey, Name child, int param = 0 )
	{
		Super.Init(desc.mXpos,desc.mYpos,desc.mLinespacing,child,param);
		mText = text;
		mFont = desc.mFont;
		mColor = desc.mFontColor;
		mColorSelected = desc.mFontcolor2;
		mHotkey = hotkey.GetNextCodePoint(0);
		prevms = MSTime();
	}

	void InitDirect( double x, double y, int height, int hotkey, String text, Font font, int color, int color2, Name child, int param = 0 )
	{
		Super.Init(x,y,height,child,param);
		mText = text;
		mFont = font;
		mColor = color;
		mColorSelected = color2;
		mHotkey = hotkey;
		prevms = MSTime();
	}

	override void Draw( bool selected, ListMenuDescriptor desc )
	{
		if ( prevms )
		{
			double frametime = (MSTime()-prevms)/1000.;
			// naive, but whatever
			if ( selected )
			{
				double theta = clamp(5.*frametime,0.,1.);
				selfade = min(1.,selfade+theta);
			}
			else
			{
				double theta = clamp(3.*frametime,0.,1.);
				selfade = max(0.,selfade-theta);
			}
		}
		int w = desc?desc.DisplayWidth():ListMenuDescriptor.CleanScale;
		int h = desc?desc.DisplayHeight():-1;
		String text = StringTable.Localize(mText);
		double x;
		// centered
		if ( w == ListMenuDescriptor.CleanScale ) x = (320-mFont.StringWidth(text))/2;
		else x = (w-mFont.StringWidth(text))/2;
		double y = mYPos;
		if ( w == ListMenuDescriptor.CleanScale )
		{
			UnUtility.AdjustClean_1(x,y);
			Screen.DrawText(mFont,mColor,x,y,text,DTA_CleanNoMove_1,true,DTA_Alpha,1.-selfade);
			UnUtility.StripColor(text);	// full tint when selected, ignore color tags
			Screen.DrawText(mFont,mColorSelected,x,y,text,DTA_CleanNoMove_1,true,DTA_Alpha,selfade);
		}
		else
		{
			Screen.DrawText(mFont,mColor,x,y,text,DTA_VirtualWidth,w,DTA_VirtualHeight,h,DTA_FullscreenScale,FSMode_ScaleToFit43,DTA_Alpha,1.-selfade);
			UnUtility.StripColor(text);	// full tint when selected, ignore color tags
			Screen.DrawText(mFont,mColorSelected,x,y,text,DTA_VirtualWidth,w,DTA_VirtualHeight,h,DTA_FullscreenScale,FSMode_ScaleToFit43,DTA_Alpha,selfade);
		}
		prevms = MSTime();
	}
}
